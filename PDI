#include <iostream>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <conio.h>
#define MAX 512

using namespace std;

struct Img
{
    int linhas;
    int colunas;
    int cores [MAX][MAX][3];
};


void abre_img (char nome[], Img& img)
{
    int i, j, k, pixel;
    fstream foto;
    char P3[MAX];
    foto.open(nome);
    while(!foto.is_open())
    {
        cout << "Erro: arquivo nao encontrado. Tente novamente"<<endl;
        cin.ignore();
        cin >> nome;
        foto.open(nome);

    }

    foto >> P3;
    if(strcmp(P3,"P3\0") != 0)
    {
        cout << "Arquivo nao e do tipo ppm!"<< endl;
        exit(0);
    }
    foto >> img.colunas >> img.linhas;
    foto >> pixel;
    for (i=0; i< img.linhas; i++)
    {
        for (j=0; j<img.colunas; j++)
        {
            for (k=0; k<3; k++)
            {
                foto >> img.cores[i][j][k];
            }
        }

    }
    foto.close();
}

void corta_rgb(Img img_in, Img& img_out, int li, int ci, int lf, int cf)
{
    int i, j,k, i2=0, j2=0;
    img_out.linhas=lf-li+1;
    img_out.colunas=cf-ci+1;

    for (i=li; i<=lf; i++)
    {
        for (j=ci; j<=cf; j++)
        {
            for (k=0; k<3; k++)
            {
                img_out.cores[i2][j2][k]=img_in.cores[i][j][k];
            }
            j2++;
        }
        j2=0;
        i2++;
    }


}

void rotaciona(Img img_in, Img& img_out)
{
    Img aux;

    img_out.colunas = img_in.linhas;
    img_out.linhas = img_in.colunas;



    for(int i=0; i<img_in.linhas; i++)
    {
        for(int j=0; j<img_in.colunas; j++)
        {
            for(int k=0; k<3; k++)
            {
                aux.cores[j][i][k] = img_in.cores[i][j][k];
            }

        }
    }
    int j2=0;

    for(int i=0; i<img_out.linhas; i++)
    {
        for(int j=(img_out.colunas)-1; j>=0; j--)
        {
            for(int k=0; k<3; k++)
            {
                img_out.cores[i][j2][k] = aux.cores[i][j][k];

            }
            j2++;
        }
        j2=0;
    }

}


void aumenta_tamanho(Img img_in, Img& img_out)
{

    img_out.linhas = (img_in.linhas*2)-1;
    img_out.colunas =( img_in.colunas*2)-1;

    for(int i=0; i<img_in.linhas; i++)
    {
        for(int j=0; j<img_in.colunas; j++)
        {
            for(int k=0; k<3; k++)
            {
                img_out.cores[2*i][2*j][k] = img_in.cores[i][j][k];
            }

        }
    }

    for(int i=1; i<img_out.linhas; i+=2)
    {

        for(int k=0; k<3; k++)
        {
            img_out.cores[0][i][k] = (img_out.cores[0][i-1][k]+img_out.cores[0][i+1][k])/2;
            img_out.cores[i][0][k] = (img_out.cores[i-1][0][k]+img_out.cores[i+1][0][k])/2;
            img_out.cores[img_out.linhas-1][i][k] = (img_out.cores[img_out.linhas-1][i-1][k]+img_out.cores[img_out.linhas-1][i+1][k])/2;
            img_out.cores[i][img_out.colunas-1][k] = (img_out.cores[i-1][img_out.colunas-1][k]+img_out.cores[i+1][img_out.colunas-1][k])/2;

        }

    }



    for(int i=1; i<img_out.linhas; i+=2)
    {
        for(int j=1; j<img_out.colunas; j+=2)
        {
            for(int k=0; k<3; k++)
            {
                img_out.cores[i][j][k] = (img_out.cores[i-1][j-1][k]+img_out.cores[i-1][j+1][k]+img_out.cores[i+1][j-1][k]+img_out.cores[i+1][j+1][k])/4;
            }

        }
    }

    for(int i=1; i<img_out.linhas-1; i++)
    {
        int j;
        if (i%2==0) j=1;
        if (i%2==1) j=2;
        for(; j<img_out.colunas-1; j+=2)
        {
            for(int k=0; k<3; k++)
            {
                img_out.cores[i][j][k] = (img_out.cores[i][j-1][k]+img_out.cores[i-1][j][k]+img_out.cores[i+1][j][k]+img_out.cores[i][j+1][k])/4;
            }

        }
    }

}

void borra_imagem(Img img_in, Img& img_out)
{

    img_out.linhas = img_in.linhas;
    img_out.colunas =img_in.colunas;

    for(int i=0; i<img_in.linhas; i++)
    {
        for(int j=0; j<img_in.colunas; j++)
        {
            for(int k=0; k<3; k++)
            {
                img_out.cores[i][j][k] = (img_in.cores[i-1][j-1][k]+img_in.cores[i-1][j][k]+img_in.cores[i-1][j+1][k]+img_in.cores[i][j-1][k]+img_in.cores[i][j][k]+img_in.cores[i][j+1][k]+img_in.cores[i+1][j-1][k]+img_in.cores[i+1][j][k]+img_in.cores[i+1][j+1][k])/9;
            }
        }
    }


}

void computa_derivada_horizontal(Img img_in, Img& img_out)
{
    img_out.linhas = img_in.linhas;
    img_out.colunas =img_in.colunas;

    for(int i=0; i<img_in.linhas; i++)
    {
        for(int j=0; j<img_in.colunas; j++)
        {
            for(int k=0; k<3; k++)
            {

                img_out.cores[i][j][k]=((img_in.cores[i-1][j-1][k])/(-4))+((img_in.cores[i-1][j+1][k])/(4))+((img_in.cores[i][j-1][k])/(-2))+((img_in.cores[i][j+1][k])/(2))+((img_in.cores[i+1][j-1][k])/(-4))+((img_in.cores[i+1][j+1][k])/(4));

                if(img_out.cores[i][j][k]<0)
                {

                    img_out.cores[i][j][k]*=(-1);
                }

            }
        }
    }


}

void computa_derivada_vertical(Img img_in, Img& img_out)
{
    img_out.linhas = img_in.linhas;
    img_out.colunas =img_in.colunas;

    for(int i=0; i<img_in.linhas; i++)
    {
        for(int j=0; j<img_in.colunas; j++)
        {
            for(int k=0; k<3; k++)
            {

                img_out.cores[i][j][k]=((img_in.cores[i-1][j-1][k])/(-4))+((img_in.cores[i-1][j+1][k])/(-4))+((img_in.cores[i-1][j][k])/(-2))+((img_in.cores[i+1][j][k])/(2))+((img_in.cores[i+1][j-1][k])/(4))+((img_in.cores[i+1][j+1][k])/(4));

                if(img_out.cores[i][j][k]<0)
                {

                    img_out.cores[i][j][k]*=(-1);
                }

            }
        }
    }


}

void salva_img(char nome[], Img img)
{
    ofstream foto2;
    int i, j, k;
    foto2.open(nome);
    foto2<<"P3" << endl<<img.colunas<< " " << img.linhas<< endl<< 255<< endl;
    for (i=0; i< img.linhas; i++)
    {
        for (j=0; j<img.colunas; j++)
        {
            for (k=0; k<3; k++)
            {
                foto2 << img.cores[i][j][k]<< " ";
            }
        }
        foto2<<endl;

    }
    foto2.close();
}


void menu (Img img, Img& img_out)
{
    int n;

    cout <<endl<< "Digite uma das opcoes para: " <<endl;
    cout << "(1) recortar a imagem " <<endl;
    cout << "(2) rotacionar a imagem " <<endl;
    cout << "(3) aumentar a imagem" <<endl;
    cout << "(4) filtrar em passa baixa" <<endl;
    cout << "(5) filtrar em passa alta" <<endl;
    cin >> n;
    while(n<1 || n>5)
    {
        cout << "Valor nao correspondente. Digite novamente"<< endl<<endl;
        cin >> n;
    }

    if (n==1)
    {
        cout <<"Insira respectivamente a linha inicial, a coluna inicial, a linha final e a coluna final de recorte da imagem sendo no maximo "<< img.linhas<< endl;
        int li, ci,lf, cf;
        cin>>li>>ci>>lf>>cf;
        while(cf>img.colunas || ci<0 || lf>img.linhas || li<0 || li>lf ||ci> cf)
        {
            cout << "Valores invalidos. Digite novamente a linha inicial, a coluna inicial, a linha final e a coluna final respectivamente."<< endl<<endl;
            cin>>li>>ci>>lf>>cf;
        }
        corta_rgb(img, img_out, li, ci, lf, cf);


        cout<<endl<< "Imagem recortada"<<endl<<endl;

    }
    if (n==2)
    {
        int x;
        cout<<"Digite (1) para rotacionar horario ou (2) para anti-horario."<<endl<<endl;
        cin >>x;
        while(x<1 || x>2)
        {
            cout << "Valor nao correspondente. Digite novamente."<< endl<<endl;
            cin >> x;
        }
        if(x==1)
        {
            rotaciona(img, img_out);
        }
        if(x==2)
        {
            Img aux;
            rotaciona(img, img_out);
            rotaciona(img_out, aux);
            rotaciona (aux, img_out);

        }

        cout<<endl<< "Imagem rotacionada."<<endl<<endl;
    }
    if (n==3)
    {
        aumenta_tamanho(img,img_out);

        cout<<endl<< "Imagem aumentada."<<endl<<endl;

    }
    if (n==4)
    {
        borra_imagem(img, img_out);


        cout<<endl<< "Imagem filtrada em passa baixa."<<endl<<endl;

    }
    if (n==5)
    {
        int x;
        cout<< "Digite (1) para calcular a derivada horizontal(1) ou (2) para a vertical. "<< endl<<endl;
        cin >>x;
        while(x<1 || x>2)
        {
            cout << "Valor nao correspondente. Digite novamente."<< endl<<endl;
            cin >> x;
        }
        if(x==1)
        {
            computa_derivada_horizontal(img, img_out);

            cout<<endl<< "Imagem filtrada horizontalmente."<<endl<<endl;
        }
        if(x==2)
        {

            computa_derivada_vertical(img, img_out);
            cout<<endl<< "Imagem filtrada verticalmente."<<endl<<endl;
        }
    }

}


int main ()
{



    fstream foto;
    int x;
    char nome[MAX], novo[MAX];
    Img img, img_out;
    cout << "________________________________________________________________________________"<<endl;
    cout << "|                                                                              |"<<endl;
    cout << "|                                                                              |"<<endl;
    cout << "|                       EDITOR DE IMAGENS WILDCATS                             |"<< endl;
    cout << "|                                                                              |"<<endl;
    cout << "|______________________________________________________________________________|"<<endl<<endl<<endl;
    cout << "Insira o nome da imagem a ser editada." <<endl<<endl;
    cin>> nome;
    abre_img (nome, img);
    cout<< endl<< endl<< endl;
    menu(img, img_out);

    do
    {
        cout<<endl<<"Selecione uma dessas opcoes:"<<endl<<endl;
        cout << "(1) continuar editando. " <<endl;
        cout << "(2) salvar imagem e continuar editando. " <<endl;
        cout << "(3) salvar imagem e finalizar programa." <<endl;
        cout << "(4) encerrar o programa." <<endl;
        cin >> x;
        while(x<1 || x>4)
        {
            cout << "Valor nao correspondente. Digite novamente."<< endl;
            cin >> x;
        }
        if (x==1 || x==2)
        {
            if (x==2)
            {
                cout<<"Insira o nome do arquivo a ser salvo."<<endl;
                cin >> novo;
                salva_img(novo, img_out);
            }
            img = img_out;
            menu(img, img_out);
        }
        if(x==4) exit(0);

    }
    while (x==1|| x==2);


    cout<<"Insira o nome do arquivo a ser salvo."<<endl;
    cin >> novo;
    salva_img(novo, img_out);
    return 0;
}
